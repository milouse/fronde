#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'r18n-core'
require_relative '../lib/fronde/utils'
require_relative '../lib/fronde/version'
require_relative '../lib/fronde/cli'

R18n.default_places = File.expand_path('../locales', __dir__)
R18n.set Fronde::CONFIG.get('lang')

optparser = OptionParser.new
optparser.version = Fronde::VERSION

Fronde::Utils::FRONDE_OPTIONS.each do |k, opt|
  optparser.send(opt[:meth] || :on, *Fronde::Utils.decorate_option(k))
end

params = {}
optparser.parse!(into: params)

if params[:version]
  warn optparser.ver
  exit
end

if ARGV[0] == 'help'
  params[:help] = true
  ARGV.shift
end
command = ARGV[0]

fronde = Fronde::CLI::App.new(params)
method = "fronde_#{command}".to_sym
cmd_err = !fronde.respond_to?(method)
if params[:help] || cmd_err
  cmd_err = false if params[:help] && !command
  warn R18n.t.fronde.bin.error.no_command if cmd_err
  fronde.fronde_help(command)
  exit(cmd_err ? 1 : 0)
end

ARGV.shift

init_cmds = %i[fronde_init fronde_config fronde_update]
unless File.exist?('config.yml') || init_cmds.include?(method)
  fronde.fronde_init
end
if Fronde::Utils.command_options(command)[:with_args]
  fronde.send method, *ARGV
else
  fronde.send method
end
